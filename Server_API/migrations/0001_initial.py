# Generated by Django 4.2.7 on 2024-01-29 19:32

import Server_API.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_category', models.CharField(blank=True, max_length=30, null=True)),
                ('status', models.CharField(blank=True, max_length=30, null=True)),
                ('info', models.CharField(blank=True, max_length=100, null=True)),
                ('image', models.ImageField(blank=True, max_length=120, null=True, upload_to='')),
            ],
            options={
                'db_table': 'category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email адрес')),
                ('password', models.CharField(max_length=50, verbose_name='Пароль')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Является ли пользователь менеджером?')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Является ли пользователь админом?')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', Server_API.models.NewUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SellRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_creation', models.DateTimeField(blank=True, null=True)),
                ('date_formation', models.DateTimeField(blank=True, null=True)),
                ('date_completion', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(blank=True, default='Черновик', max_length=30, null=True)),
                ('id_creator', models.ForeignKey(blank=True, db_column='id_creator', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='creator_sellreq', to=settings.AUTH_USER_MODEL)),
                ('id_moderator', models.ForeignKey(blank=True, db_column='id_moderator', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='moderator_sellreq', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sell_request',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RequestCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_category', models.ForeignKey(db_column='id_category', on_delete=django.db.models.deletion.DO_NOTHING, related_name='uniq_id_cat', to='Server_API.category')),
                ('id_request', models.ForeignKey(db_column='id_request', on_delete=django.db.models.deletion.DO_NOTHING, related_name='uniq_id_req', to='Server_API.sellrequest')),
            ],
            options={
                'db_table': 'request_category',
                'managed': True,
                'unique_together': {('id_request', 'id_category')},
            },
        ),
    ]
